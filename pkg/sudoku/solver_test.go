package sudoku

import (
	"testing"
)

func TestSolve(t *testing.T) {
	tests := []struct {
		description string
		puzzle      [boardSize][boardSize]uint8
		expected    [boardSize][boardSize]uint8
	}{
		{
			description: "Test case 1",
			puzzle: [boardSize][boardSize]uint8{
				{0, 5, 8, 3, 7, 4, 2, 6, 9},
				{2, 7, 3, 0, 6, 9, 1, 4, 8},
				{4, 0, 0, 2, 0, 1, 3, 0, 0},
				{6, 0, 5, 7, 1, 2, 0, 3, 4},
				{3, 2, 1, 6, 4, 0, 5, 0, 0},
				{7, 8, 4, 9, 5, 0, 6, 1, 2},
				{0, 0, 2, 1, 9, 7, 4, 8, 0},
				{8, 1, 0, 0, 2, 6, 9, 0, 3},
				{9, 4, 6, 8, 3, 5, 7, 2, 1},
			},
			expected: [boardSize][boardSize]uint8{
				{1, 5, 8, 3, 7, 4, 2, 6, 9},
				{2, 7, 3, 5, 6, 9, 1, 4, 8},
				{4, 6, 9, 2, 8, 1, 3, 7, 5},
				{6, 9, 5, 7, 1, 2, 8, 3, 4},
				{3, 2, 1, 6, 4, 8, 5, 9, 7},
				{7, 8, 4, 9, 5, 3, 6, 1, 2},
				{5, 3, 2, 1, 9, 7, 4, 8, 6},
				{8, 1, 7, 4, 2, 6, 9, 5, 3},
				{9, 4, 6, 8, 3, 5, 7, 2, 1},
			},
		},
		{
			description: "Test case 2",
			puzzle: [boardSize][boardSize]uint8{
				{7, 8, 0, 5, 1, 2, 9, 0, 0},
				{9, 5, 2, 3, 0, 4, 7, 1, 0},
				{3, 1, 0, 0, 6, 0, 8, 0, 5},
				{0, 7, 0, 8, 2, 5, 4, 6, 0},
				{4, 0, 9, 6, 0, 1, 5, 3, 0},
				{8, 6, 5, 9, 0, 0, 2, 0, 1},
				{0, 9, 0, 2, 3, 6, 0, 0, 4},
				{2, 3, 1, 0, 9, 8, 6, 5, 7},
				{6, 4, 8, 1, 5, 7, 3, 9, 0},
			},
			expected: [boardSize][boardSize]uint8{
				{7, 8, 6, 5, 1, 2, 9, 4, 3},
				{9, 5, 2, 3, 8, 4, 7, 1, 6},
				{3, 1, 4, 7, 6, 9, 8, 2, 5},
				{1, 7, 3, 8, 2, 5, 4, 6, 9},
				{4, 2, 9, 6, 7, 1, 5, 3, 8},
				{8, 6, 5, 9, 4, 3, 2, 7, 1},
				{5, 9, 7, 2, 3, 6, 1, 8, 4},
				{2, 3, 1, 4, 9, 8, 6, 5, 7},
				{6, 4, 8, 1, 5, 7, 3, 9, 2},
			},
		},
		{
			description: "Test case 3",
			puzzle: [boardSize][boardSize]uint8{
				{6, 7, 4, 5, 2, 1, 9, 0, 8},
				{9, 0, 1, 0, 3, 4, 2, 0, 6},
				{3, 2, 0, 8, 9, 0, 0, 0, 4},
				{0, 0, 8, 1, 0, 2, 6, 9, 0},
				{2, 0, 0, 0, 5, 0, 7, 0, 1},
				{1, 0, 0, 6, 8, 0, 3, 4, 0},
				{8, 1, 0, 4, 7, 0, 5, 0, 9},
				{4, 9, 0, 2, 6, 5, 8, 1, 3},
				{0, 0, 3, 0, 1, 0, 0, 2, 7},
			},
			expected: [boardSize][boardSize]uint8{
				{6, 7, 4, 5, 2, 1, 9, 3, 8},
				{9, 8, 1, 7, 3, 4, 2, 5, 6},
				{3, 2, 5, 8, 9, 6, 1, 7, 4},
				{7, 3, 8, 1, 4, 2, 6, 9, 5},
				{2, 4, 6, 3, 5, 9, 7, 8, 1},
				{1, 5, 9, 6, 8, 7, 3, 4, 2},
				{8, 1, 2, 4, 7, 3, 5, 6, 9},
				{4, 9, 7, 2, 6, 5, 8, 1, 3},
				{5, 6, 3, 9, 1, 8, 4, 2, 7},
			},
		},
		{
			description: "Test case 4",
			puzzle: [boardSize][boardSize]uint8{
				{4, 0, 0, 9, 7, 0, 5, 0, 2},
				{6, 0, 0, 0, 3, 0, 1, 0, 4},
				{0, 0, 5, 0, 0, 0, 9, 0, 0},
				{3, 0, 9, 0, 0, 4, 0, 0, 0},
				{0, 0, 0, 0, 0, 3, 0, 0, 0},
				{2, 5, 0, 0, 0, 0, 0, 1, 0},
				{0, 0, 6, 0, 4, 0, 0, 0, 0},
				{8, 1, 0, 0, 0, 0, 0, 0, 7},
				{0, 0, 0, 0, 1, 6, 8, 0, 0},
			},
			expected: [boardSize][boardSize]uint8{
				{4, 8, 3, 9, 7, 1, 5, 6, 2},
				{6, 9, 2, 8, 3, 5, 1, 7, 4},
				{1, 7, 5, 4, 6, 2, 9, 3, 8},
				{3, 6, 9, 1, 2, 4, 7, 8, 5},
				{7, 4, 1, 5, 8, 3, 2, 9, 6},
				{2, 5, 8, 6, 9, 7, 4, 1, 3},
				{9, 2, 6, 7, 4, 8, 3, 5, 1},
				{8, 1, 4, 3, 5, 9, 6, 2, 7},
				{5, 3, 7, 2, 1, 6, 8, 4, 9},
			},
		},
		{
			description: "Test case 5: solved board",
			puzzle: [boardSize][boardSize]uint8{
				{1, 2, 3, 4, 5, 6, 7, 8, 9},
				{4, 5, 6, 7, 8, 9, 1, 2, 3},
				{7, 8, 9, 1, 2, 3, 4, 5, 6},
				{2, 3, 4, 5, 6, 7, 8, 9, 1},
				{5, 6, 7, 8, 9, 1, 2, 3, 4},
				{8, 9, 1, 2, 3, 4, 5, 6, 7},
				{3, 4, 5, 6, 7, 8, 9, 1, 2},
				{6, 7, 8, 9, 1, 2, 3, 4, 5},
				{9, 1, 2, 3, 4, 5, 6, 7, 8},
			},
			expected: [boardSize][boardSize]uint8{
				{1, 2, 3, 4, 5, 6, 7, 8, 9},
				{4, 5, 6, 7, 8, 9, 1, 2, 3},
				{7, 8, 9, 1, 2, 3, 4, 5, 6},
				{2, 3, 4, 5, 6, 7, 8, 9, 1},
				{5, 6, 7, 8, 9, 1, 2, 3, 4},
				{8, 9, 1, 2, 3, 4, 5, 6, 7},
				{3, 4, 5, 6, 7, 8, 9, 1, 2},
				{6, 7, 8, 9, 1, 2, 3, 4, 5},
				{9, 1, 2, 3, 4, 5, 6, 7, 8},
			},
		},
		{
			description: "Test case 6: sequential numbers",
			puzzle: [boardSize][boardSize]uint8{
				{0, 2, 0, 0, 0, 6, 7, 0, 9},
				{4, 0, 0, 0, 0, 9, 0, 2, 0},
				{0, 8, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 8, 0, 1},
				{5, 6, 7, 0, 0, 0, 0, 0, 0},
				{0, 9, 0, 0, 0, 4, 0, 6, 0},
				{0, 4, 0, 6, 0, 8, 0, 0, 0},
				{0, 7, 0, 9, 0, 0, 3, 0, 5},
				{0, 0, 0, 0, 0, 0, 0, 7, 0},
			},
			expected: [boardSize][boardSize]uint8{
				{1, 2, 3, 4, 5, 6, 7, 8, 9},
				{4, 5, 6, 7, 8, 9, 1, 2, 3},
				{7, 8, 9, 1, 2, 3, 4, 5, 6},
				{2, 3, 4, 5, 6, 7, 8, 9, 1},
				{5, 6, 7, 8, 9, 1, 2, 3, 4},
				{8, 9, 1, 2, 3, 4, 5, 6, 7},
				{3, 4, 5, 6, 7, 8, 9, 1, 2},
				{6, 7, 8, 9, 1, 2, 3, 4, 5},
				{9, 1, 2, 3, 4, 5, 6, 7, 8},
			},
		},
		{
			description: "Test case 7: evil Sudoku with 17 initial values",
			puzzle: [boardSize][boardSize]uint8{
				{0, 0, 0, 3, 0, 0, 0, 7, 0},
				{1, 5, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 2, 0, 7, 0, 0, 0},
				{2, 0, 0, 7, 0, 0, 0, 0, 3},
				{6, 0, 8, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 4, 0},
				{0, 0, 0, 0, 1, 0, 6, 0, 0},
				{0, 4, 0, 0, 0, 0, 1, 0, 0},
				{0, 0, 2, 0, 0, 0, 0, 0, 0},
			},
			expected: [boardSize][boardSize]uint8{
				{8, 2, 9, 3, 6, 1, 4, 7, 5},
				{1, 5, 7, 8, 9, 4, 3, 6, 2},
				{4, 6, 3, 2, 5, 7, 9, 8, 1},
				{2, 9, 4, 7, 8, 6, 5, 1, 3},
				{6, 3, 8, 1, 4, 5, 2, 9, 7},
				{5, 7, 1, 9, 2, 3, 8, 4, 6},
				{7, 8, 5, 4, 1, 2, 6, 3, 9},
				{3, 4, 6, 5, 7, 9, 1, 2, 8},
				{9, 1, 2, 6, 3, 8, 7, 5, 4},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.description, func(t *testing.T) {
			s := NewSudokuWithBoard(tt.puzzle)
			s.Solve()
			if s.hasAnyEmptyCell() {
				t.Errorf("the Sudoku board is not solved:\n%s", s.PrintToString())
			}
			if !s.isValidSudoku() {
				t.Errorf("invalid Sudoku board:\n%s", s.PrintToString())
			}
			if s.board != tt.expected {
				puzzle := s.PrintToString()
				expected := NewSudokuWithBoard(tt.expected).PrintToString()
				t.Errorf("invalid Sudoku puzzle board does not meet the expected:\n%s%s", puzzle, expected)
			}
		})
	}
}
